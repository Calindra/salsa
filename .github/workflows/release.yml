name: Release Executable

on: push

env:
  CARGO_TERM_COLOR: always
  DEBIAN_FRONTEND: noninteractive
  PROJECT_NAME: salsa

jobs:
  build:
    name: ${{ matrix.target }} (${{ matrix.runner }})
    runs-on: ${{ matrix.runner }}
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test]
    timeout-minutes: 240
    outputs:
      release_name: ${{ steps.prepare.outputs.release_name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # `runner`: GHA runner label
          # `target`: Rust build target triple
          # `platform` and `arch`: Used in bin names
          - name: linux-amd64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux
            arch: amd64
          - name: linux-arm64
            runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux
            arch: arm64
          - name: macos-amd64
            runner: macos-latest
            target: x86_64-apple-darwin
            platform: darwin
            arch: amd64
          - name: macos-arm64
            runner: macos-latest
            target: aarch64-apple-darwin
            platform: darwin
            arch: arm64
          - name: win32-amd64
            runner: windows-latest
            target: x86_64-pc-windows-msvc
            platform: win32
            arch: amd64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          cache-on-failure: true

      - name: Apple M1 setup
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV

      - name: Linux ARM setup
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Build binaries
        run: cross build --locked --release --target ${{ matrix.target }}

      - name: Prepare binaries
        id: prepare
        shell: bash
        run: |
          BIN_SUFFIX=""
          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
            BIN_SUFFIX=".exe"
          fi

          # The built binary output location
          BIN_OUTPUT="target/${{ matrix.target }}/release/${PROJECT_NAME}${BIN_SUFFIX}"

          # Define a better name for the final binary
          BIN_RELEASE="${PROJECT_NAME}-${{ matrix.name }}${BIN_SUFFIX}"
          BIN_RELEASE_VERSIONED="${PROJECT_NAME}-${{ github.ref_name }}-${{ matrix.name }}${BIN_SUFFIX}"

          # Move the built binary where you want it
          mv -v "${BIN_OUTPUT}" "./${BIN_RELEASE}"

          echo "release_name=${BIN_RELEASE}" >> $GITHUB_OUTPUT

      - name: Generate checksum (Linux / Windows)
        if: matrix.platform == 'linux' || matrix.platform == 'win32'
        run: |
          sha256sum ${{ steps.prepare.outputs.release_name }} > ${{ steps.prepare.outputs.release_name }}.sha256

      - name: Generate checksum (Darwin)
        if: matrix.platform == 'darwin'
        run: |
          shasum -a 256 ${{ steps.prepare.outputs.release_name }} > ${{ steps.prepare.outputs.release_name }}.sha256

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          files: |
            ${{ steps.prepare.outputs.release_name }}
            ${{ steps.prepare.outputs.release_name }}.sha256

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: Run tests
        run: |
          cargo test -- --show-output --test-threads=1
